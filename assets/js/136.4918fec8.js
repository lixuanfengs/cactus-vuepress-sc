(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{486:function(n,a,t){"use strict";t.r(a);var s=t(0),e=Object(s.a)({},(function(){var n=this,a=n._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("注：我对原文进行了格式规范和内容完善。")]),n._v(" "),a("p",[n._v("原文地址：https://www.javadoop.com/post/netty-part-4")]),n._v(" "),a("p",[n._v("作者：JavaDoop")]),n._v(" "),a("p",[a("code",[n._v("ChannelHandler")]),n._v(" 是消息的具体处理器，主要负责处理客户端/服务端接收和发送的数据。"),a("code",[n._v("ChannelPipeline")]),n._v(" 则是包含了一个或多个 "),a("code",[n._v("ChannelHandler")]),n._v(" 的链表。")]),n._v(" "),a("h2",{attrs:{id:"channelpipeline-消息处理器链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelpipeline-消息处理器链表"}},[n._v("#")]),n._v(" ChannelPipeline：消息处理器链表")]),n._v(" "),a("p",[n._v("我想很多读者应该或多或少都有 Netty 中 "),a("code",[n._v("pipeline")]),n._v(" 的概念。前面我们说了，使用 Netty 的时候，我们通常就只要写一些自定义的 "),a("code",[n._v("handler")]),n._v(" 就可以了，我们定义的这些 "),a("code",[n._v("handler")]),n._v(" 会组成一个 "),a("code",[n._v("pipeline")]),n._v("，用于处理 IO 事件，这个和我们平时接触的 "),a("code",[n._v("Filter")]),n._v(" 或 "),a("code",[n._v("Interceptor")]),n._v(" 表达的差不多是一个意思。")]),n._v(" "),a("p",[n._v("每个 "),a("code",[n._v("Channel")]),n._v(" 内部都有一个 pipeline，pipeline 由多个 "),a("code",[n._v("handler")]),n._v(" 组成，"),a("code",[n._v("handler")]),n._v(" 之间的顺序是很重要的，因为 IO 事件将按照顺序顺次经过 "),a("code",[n._v("pipeline")]),n._v(" 上的 "),a("code",[n._v("handler")]),n._v("，这样每个 "),a("code",[n._v("handler")]),n._v(" 可以专注于做一点点小事，由多个 handler 组合来完成一些复杂的逻辑。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/11.png",alt:"img"}})]),n._v(" "),a("p",[n._v("从图中，我们知道这是一个双向链表。")]),n._v(" "),a("h2",{attrs:{id:"io-事件-inbound-outbound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io-事件-inbound-outbound"}},[n._v("#")]),n._v(" IO 事件：Inbound & Outbound")]),n._v(" "),a("p",[n._v("首先，我们看两个重要的概念："),a("strong",[n._v("Inbound")]),n._v(" 和 "),a("strong",[n._v("Outbound")]),n._v("。在 Netty 中，IO 事件被分为 Inbound 事件和 Outbound 事件。")]),n._v(" "),a("p",[a("strong",[n._v("Outbound")]),n._v(" 的 "),a("strong",[n._v("out")]),n._v(" 指的是 "),a("strong",[n._v("出去")]),n._v("，有哪些 IO 事件属于此类呢？比如 "),a("code",[n._v("connect")]),n._v("、"),a("code",[n._v("write")]),n._v("、"),a("code",[n._v("flush")]),n._v(" 这些 IO 操作是往外部方向进行的，它们就属于 Outbound 事件。")]),n._v(" "),a("p",[n._v("其他的，诸如 "),a("code",[n._v("accept")]),n._v("、"),a("code",[n._v("read")]),n._v(" 这种就属于 Inbound 事件。")]),n._v(" "),a("p",[n._v("比如客户端在发起请求的时候，需要下面几步：")]),n._v(" "),a("ol",[a("li",[a("code",[n._v("connect")]),n._v(" 到服务器;")]),n._v(" "),a("li",[a("code",[n._v("write")]),n._v(" 数据传到服务器")]),n._v(" "),a("li",[a("code",[n._v("read")]),n._v(" 服务器返回的数据")])]),n._v(" "),a("p",[a("code",[n._v("connect")]),n._v(" 和 "),a("code",[n._v("write")]),n._v(" 就是 "),a("strong",[n._v("out")]),n._v(" 事件，后面的 "),a("code",[n._v("read")]),n._v(" 就是 "),a("strong",[n._v("in")]),n._v(" 事件。")]),n._v(" "),a("p",[n._v("比如很多初学者看不懂下面的这段代码，这段代码用于服务端的 childHandler 中：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("StringDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("2.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("StringEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("3.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("BizHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("初学者肯定都纳闷，以为这个顺序写错了，应该是先 decode 客户端过来的数据，然后用 "),a("code",[n._v("BizHandler")]),n._v(" 处理业务逻辑，最后再 encode 数据然后返回给客户端，所以添加的顺序应该是 "),a("strong",[n._v("1 -> 3 -> 2")]),n._v(" 才对。")]),n._v(" "),a("p",[n._v("其实这里的三个 handler 是分组的，分为 Inbound（1 和 3） 和 Outbound（2）：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("StringDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("2.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("StringEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("3.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("BizHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[n._v("客户端连接进来的时候，读取（read）客户端请求数据的操作是 Inbound 的，所以会先使用 1，然后是 3 对处理进行处理；")]),n._v(" "),a("li",[n._v("处理完数据后，返回给客户端数据的 write 操作是 Outbound 的，此时使用的是 2。")])]),n._v(" "),a("p",[n._v("所以虽然添加顺序有点怪，但是执行顺序其实是按照 1 -> 3 -> 2 进行的。")]),n._v(" "),a("p",[n._v("如果我们在上面的基础上，加上下面的第四行，这是一个 OutboundHandler：")]),n._v(" "),a("p",[n._v("那么执行顺序是不是就是 1 -> 3 -> 2 -> 4 呢？答案是：不是的。")]),n._v(" "),a("p",[a("strong",[n._v("对于 Inbound 操作，按照添加顺序执行每个 Inbound 类型的")]),n._v(" "),a("code",[n._v("**handler**")]),a("strong",[n._v("；而对于 Outbound 操作，是反着来的，从后往前，顺次执行 Outbound 类型的")]),n._v(" "),a("code",[n._v("**handler**")]),a("strong",[n._v("。")])]),n._v(" "),a("p",[n._v("所以，上面的顺序应该是先 1 后 3，它们是 Inbound 的，然后是 4，最后才是 2，它们两个是 Outbound 的。说实话，这种组织方式对新手应该很是头疼。")]),n._v(" "),a("p",[n._v("那我们在开发的时候怎么写呢？其实也很简单，从最外层开始写，一步步写到业务处理层，把 Inbound 和 Outbound 混写在一起。比如 encode 和 decode 是属于最外层的处理逻辑，先写它们。假设 decode 以后是字符串，那再进来一层应该可以写进来和出去的日志。再进来一层可以写 字符串 <=> 对象 的相互转换。然后就应该写业务层了。")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[n._v("4.")]),n._v(" pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("OutboundHandlerA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("到这里，我想大家应该都知道 Inbound 和 Outbound 了吧？下面我们来介绍它们的接口使用。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/9.png",alt:"img"}})]),n._v(" "),a("p",[n._v("定义处理 Inbound 事件的 "),a("code",[n._v("handler")]),n._v(" 需要实现 "),a("code",[n._v("ChannelInboundHandler")]),n._v("，定义处理 Outbound 事件的 "),a("code",[n._v("handler")]),n._v(" 需要实现 "),a("code",[n._v("ChannelOutboundHandler")]),n._v("。最下面的三个类，是 Netty 提供的适配器，特别的，如果我们希望定义一个 handler 能同时处理 Inbound 和 Outbound 事件，可以通过继承中间的 "),a("code",[n._v("**ChannelDuplexHandler**")]),n._v(" 的方式，比如 "),a("code",[n._v("**LoggingHandler**")]),n._v(" 这种既可以用来处理 Inbound 也可以用来处理 Outbound 事件的 "),a("code",[n._v("handler")]),n._v("。")]),n._v(" "),a("p",[n._v("下图来源于 "),a("a",{attrs:{href:"http://tutorials.jenkov.com/netty/netty-channelpipeline.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Netty ChannelPipeline"),a("OutboundLink")],1),n._v(" 。")]),n._v(" "),a("p",[a("img",{attrs:{src:"http://tutorials.jenkov.com/images/netty/channelpipeline-1.png",alt:"img"}})]),n._v(" "),a("p",[n._v("有了 Inbound 和 Outbound 的概念以后，我们来开始介绍 Pipeline 的源码。")]),n._v(" "),a("h2",{attrs:{id:"channelpipeline-源码解读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#channelpipeline-源码解读"}},[n._v("#")]),n._v(" ChannelPipeline 源码解读")]),n._v(" "),a("p",[n._v("我们说过，一个 "),a("code",[n._v("Channel")]),n._v(" 关联一个 pipeline，"),a("code",[n._v("NioSocketChannel")]),n._v(" 和 "),a("code",[n._v("NioServerSocketChannel")]),n._v(" 在执行构造方法的时候，都会走到它们的父类 "),a("code",[n._v("AbstractChannel")]),n._v(" 的构造方法中：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("protected")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("AbstractChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),n._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 给每个 channel 分配一个唯一 id")]),n._v("\n    id "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("newId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 每个 channel 内部需要一个 Unsafe 的实例")]),n._v("\n    unsafe "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("newUnsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 每个 channel 内部都会创建一个 pipeline")]),n._v("\n    pipeline "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("newChannelPipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("上面的三行代码中，id 比较不重要，Netty 中的 "),a("code",[n._v("Unsafe")]),n._v(" 实例其实挺重要的，这里简单介绍一下。")]),n._v(" "),a("p",[n._v("在 JDK 的源码中，"),a("code",[n._v("sun.misc.Unsafe")]),n._v(" 类提供了一些底层操作的能力，它设计出来是给 JDK 中的源码使用的，比如 "),a("code",[n._v("AQS")]),n._v("、"),a("code",[n._v("ConcurrentHashMap")]),n._v(" 等，我们在之前的并发包的源码分析中也看到了很多它们使用 "),a("code",[n._v("Unsafe")]),n._v(" 的场景，这个 "),a("code",[n._v("Unsafe")]),n._v(" 类不是给我们的代码使用的，是给 JDK 源码使用的（需要的话，我们也是可以获取它的实例的）。")]),n._v(" "),a("p",[a("code",[n._v("Unsafe")]),n._v(" 类的构造方法是 "),a("code",[n._v("private")]),n._v(" 的，但是它提供了 "),a("code",[n._v("getUnsafe()")]),n._v(" 这个静态方法：")]),n._v(" "),a("p",[n._v("大家可以试一下，上面这行代码编译没有问题，但是执行的时候会抛 "),a("code",[n._v("java.lang.SecurityException")]),n._v(" 异常，因为它就不是给我们的代码用的。")]),n._v(" "),a("p",[n._v("但是如果你就是想获取 "),a("code",[n._v("Unsafe")]),n._v(" 的实例，可以通过下面这个代码获取到:")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Unsafe")]),n._v(" unsafe "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Unsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("getUnsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Field")]),n._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Unsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("getDeclaredField")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"theUnsafe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("setAccessible")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Unsafe")]),n._v(" unsafe "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Unsafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("Netty 中的 "),a("code",[n._v("Unsafe")]),n._v(" 也是同样的意思，它封装了 Netty 中会使用到的 JDK 提供的 NIO 接口，比如将 "),a("code",[n._v("channel")]),n._v(" 注册到 "),a("code",[n._v("selector")]),n._v(" 上，比如 "),a("code",[n._v("bind")]),n._v(" 操作，比如 "),a("code",[n._v("connect")]),n._v(" 操作等，"),a("strong",[n._v("这些操作都是稍微偏底层一些")]),n._v("。Netty 同样也是不希望我们的业务代码使用 "),a("code",[n._v("Unsafe")]),n._v(" 的实例，它是提供给 Netty 中的源码使用的。")]),n._v(" "),a("p",[n._v("不过，对于我们源码分析来说，我们还是会有很多时候需要分析 Unsafe 中的源码的")]),n._v(" "),a("p",[n._v("关于 "),a("code",[n._v("Unsafe")]),n._v("，我们后面用到了再说，这里只要知道，它封装了大部分需要访问 JDK 的 NIO 接口的操作就好了。这里我们继续将焦点放在实例化 "),a("code",[n._v("pipeline")]),n._v(" 上：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("protected")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DefaultChannelPipeline")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("newChannelPipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DefaultChannelPipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("这里开始调用 "),a("code",[n._v("DefaultChannelPipeline")]),n._v(" 的构造方法，并把当前 "),a("code",[n._v("channel")]),n._v(" 的引用传入：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("protected")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DefaultChannelPipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),n._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("channel "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ObjectUtil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("checkNotNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"channel"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    succeededFuture "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SucceededChannelFuture")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    voidPromise "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("VoidChannelPromise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    tail "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("TailContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    head "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("HeadContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("这里实例化了 "),a("code",[n._v("tail")]),n._v(" 和 "),a("code",[n._v("head")]),n._v(" 这两个 "),a("code",[n._v("handler")]),n._v("。tail 实现了 "),a("code",[n._v("ChannelInboundHandler")]),n._v(" 接口，而 "),a("code",[n._v("head")]),n._v(" 实现了 "),a("code",[n._v("ChannelOutboundHandler")]),n._v(" 和 "),a("code",[n._v("ChannelInboundHandler")]),n._v(" 两个接口，并且最后两行代码将 "),a("code",[n._v("tail")]),n._v(" 和 "),a("code",[n._v("head")]),n._v(" 连接起来:")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/12.png",alt:"img"}})]),n._v(" "),a("p",[n._v("注意，在不同的版本中，源码也略有差异，"),a("code",[n._v("head")]),n._v(" 不一定是 "),a("code",[n._v("in + out")]),n._v("，大家知道这点就好了。")]),n._v(" "),a("p",[n._v("还有，从上面的 "),a("code",[n._v("head")]),n._v(" 和 "),a("code",[n._v("tail")]),n._v(" 我们也可以看到，其实 "),a("code",[n._v("pipeline")]),n._v(" 中的每个元素是 "),a("code",[n._v("**ChannelHandlerContext**")]),n._v(" 的实例，而不是 "),a("code",[n._v("ChannelHandler")]),n._v(" 的实例，"),a("code",[n._v("context")]),n._v(" 包装了一下 "),a("code",[n._v("handler")]),n._v("，但是，后面我们都会用 "),a("code",[n._v("handler")]),n._v(" 来描述一个 "),a("code",[n._v("pipeline")]),n._v(" 上的节点，而不是使用 "),a("code",[n._v("context")]),n._v("，希望读者知道这一点。")]),n._v(" "),a("p",[a("code",[n._v("ChannelHandlerContext")]),n._v(" 可以说是 "),a("code",[n._v("ChannelPipeline")]),n._v(" 的核心，它代表了 "),a("code",[n._v("ChannelHandler")]),n._v(" 和 "),a("code",[n._v("ChannelPipeline")]),n._v(" 之间的关联，我们首先要知道一个 "),a("code",[n._v("ChannelPipeline")]),n._v(" 内部会维护一个双向链表，每当一个 "),a("code",[n._v("ChannelHandler")]),n._v(" 被添加到 "),a("code",[n._v("ChannelPipeline")]),n._v(" 中时，它都会被包装成为一个 "),a("code",[n._v("ChannelHandlerContext")]),n._v("，组成链表的各个节点。")]),n._v(" "),a("p",[a("img",{attrs:{src:"http://104.244.90.112/images/a2944e63-dc68-491c-b81a-defade8a7ec6.png",alt:"img"}})]),n._v(" "),a("p",[n._v("这里只是构造了 "),a("code",[n._v("pipeline")]),n._v("，并且添加了两个固定的 "),a("code",[n._v("handler")]),n._v(" 到其中（head + tail），还不涉及到自定义的 "),a("code",[n._v("handler")]),n._v(" 代码执行。我们回过头来看下面这段代码：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/13.png",alt:"img"}})]),n._v(" "),a("p",[n._v("我们说过 "),a("code",[n._v("childHandler")]),n._v(" 中指定的 "),a("code",[n._v("handler")]),n._v(" 不是给 "),a("code",[n._v("NioServerSocketChannel")]),n._v(" 使用的，是给 "),a("code",[n._v("NioSocketChannel")]),n._v(" 使用的，所以这里我们不看它。")]),n._v(" "),a("p",[n._v("这里调用 "),a("code",[n._v("handler(…)")]),n._v(" 方法指定了一个 "),a("code",[n._v("LoggingHandler")]),n._v(" 的实例，然后我们再进去下面的 "),a("code",[n._v("bind(…)")]),n._v(" 方法中看看这个 "),a("code",[n._v("LoggingHandler")]),n._v(" 实例是怎么进入到我们之前构造的 pipeline 内的。")]),n._v(" "),a("p",[n._v("顺着 "),a("code",[n._v("bind()")]),n._v(" 一直往前走，"),a("code",[n._v("bind()")]),n._v(" -> "),a("code",[n._v("doBind()")]),n._v(" -> "),a("code",[n._v("initAndRegister()")]),n._v("：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ChannelFuture")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("initAndRegister")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),n._v(" channel "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 1. 构造 channel 实例，同时会构造 pipeline 实例，")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 现在 pipeline 中有 head 和 tail 两个 handler 了")]),n._v("\n        channel "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" channelFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("newChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 2. 看这里")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("catch")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Throwable")]),n._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("上面的两行代码，第一行实现了构造 "),a("code",[n._v("channel")]),n._v(" 和 "),a("code",[n._v("channel")]),n._v(" 内部的 "),a("code",[n._v("pipeline")]),n._v("，我们来看第二行 "),a("code",[n._v("init")]),n._v(" 代码：")]),n._v(" "),a("p",[a("code",[n._v("ServerBootstrap")]),n._v("：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Override")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),n._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Exception")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 拿到刚刚创建的 channel 内部的 pipeline 实例")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ChannelPipeline")]),n._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("pipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 开始往 pipeline 中添加一个 handler，这个 handler 是 ChannelInitializer 的实例")]),n._v("\n    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ChannelInitializer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 我们以后会看到，下面这个 initChannel 方法何时会被调用")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Override")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("initChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),n._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Exception")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ChannelPipeline")]),n._v(" pipeline "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("pipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 这个方法返回我们最开始指定的 LoggingHandler 实例")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ChannelHandler")]),n._v(" handler "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("handler "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 添加 LoggingHandler")]),n._v("\n                pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 先不用管这里的 eventLoop")]),n._v("\n            ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("eventLoop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Override")]),n._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 添加一个 handler 到 pipeline 中：ServerBootstrapAcceptor")]),n._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 从名字可以看到，这个 handler 的目的是用于接收客户端请求")]),n._v("\n                    pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ServerBootstrapAcceptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("\n                            ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" currentChildGroup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" currentChildHandler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" currentChildOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" currentChildAttrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br")])]),a("p",[n._v("这里涉及到 "),a("code",[n._v("pipeline")]),n._v(" 中的辅助类 "),a("code",[n._v("ChannelInitializer")]),n._v("，我们看到，它本身是一个 "),a("code",[n._v("handler")]),n._v("（Inbound 类型），但是它的作用和普通 "),a("code",[n._v("handler")]),n._v(" 有点不一样，它纯碎是用来辅助将其他的 "),a("code",[n._v("handler")]),n._v(" 加入到 "),a("code",[n._v("pipeline")]),n._v(" 中的。")]),n._v(" "),a("p",[n._v("大家可以稍微看一下 "),a("code",[n._v("ChannelInitializer")]),n._v(" 的 "),a("code",[n._v("initChannel")]),n._v(" 方法，有个简单的认识就好，此时的 "),a("code",[n._v("pipeline")]),n._v(" 应该是这样的：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/14.png",alt:"img"}})]),n._v(" "),a("p",[a("code",[n._v("ChannelInitializer")]),n._v(" 的 "),a("code",[n._v("initChannel(channel)")]),n._v(" 方法被调用的时候，会往 "),a("code",[n._v("pipeline")]),n._v(" 中添加我们最开始指定的 "),a("code",[n._v("**LoggingHandler**")]),n._v(" 和添加一个 "),a("code",[n._v("**ServerBootstrapAcceptor**")]),n._v("。但是我们现在还不知道这个 "),a("code",[n._v("initChannel")]),n._v(" 方法何时会被调用。")]),n._v(" "),a("p",[n._v("上面我们说的是作为服务端的 "),a("code",[n._v("NioServerSocketChannel")]),n._v(" 的 "),a("code",[n._v("pipeline")]),n._v("，"),a("code",[n._v("NioSocketChannel")]),n._v(" 也是差不多的，我们可以看一下 "),a("code",[n._v("Bootstrap")]),n._v(" 类的 "),a("code",[n._v("init(channel)")]),n._v(" 方法：")]),n._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Channel")]),n._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Exception")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ChannelPipeline")]),n._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("pipeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("addLast")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("handler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/23.png",alt:"img"}})]),n._v(" "),a("p",[n._v("它和服务端 "),a("code",[n._v("ServerBootstrap")]),n._v(" 要添加 "),a("code",[n._v("ServerBootstrapAcceptor")]),n._v(" 不一样，它只需要将 "),a("code",[n._v("EchoClient")]),n._v(" 类中的 "),a("code",[n._v("ChannelInitializer")]),n._v(" 实例加进来就可以了，它的 "),a("code",[n._v("ChannelInitializer")]),n._v(" 中添加了两个 "),a("code",[n._v("handler")]),n._v("，"),a("code",[n._v("LoggingHandler")]),n._v(" 和 "),a("code",[n._v("EchoClientHandler")]),n._v("：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/16.png",alt:"img"}})]),n._v(" "),a("p",[n._v("很显然，我们需要的是像 "),a("code",[n._v("LoggingHandler")]),n._v(" 和 "),a("code",[n._v("EchoClientHandler")]),n._v(" 这样的 "),a("code",[n._v("handler")]),n._v("，但是，它们现在还不在 "),a("code",[n._v("pipeline")]),n._v(" 中，那么它们什么时候会真正进入到 "),a("code",[n._v("pipeline")]),n._v(" 中呢？以后我们再揭晓。")]),n._v(" "),a("p",[n._v("还有，为什么 "),a("code",[n._v("Server")]),n._v(" 端我们指定的是一个 "),a("code",[n._v("handler")]),n._v(" 实例，而 "),a("code",[n._v("Client")]),n._v(" 指定的是一个 "),a("code",[n._v("ChannelInitializer")]),n._v(" 实例？其实它们是可以随意搭配使用的，你甚至可以在 "),a("code",[n._v("ChannelInitializer")]),n._v(" 实例中添加 "),a("code",[n._v("ChannelInitializer")]),n._v(" 的实例。")]),n._v(" "),a("p",[n._v("大家要记住 "),a("code",[n._v("pipeline")]),n._v(" 现在的样子，"),a("strong",[n._v("head + channelInitializer + tail")]),n._v("。")]),n._v(" "),a("p",[n._v("本节没有介绍 handler 的向后传播，就是一个 "),a("code",[n._v("handler")]),n._v(" 处理完了以后，怎么传递给下一个 "),a("code",[n._v("handler")]),n._v(" 来处理？比如我们熟悉的 JavaEE 中的 "),a("code",[n._v("Filter")]),n._v(" 是采用在一个 "),a("code",[n._v("Filter")]),n._v(" 实例中调用 "),a("code",[n._v("chain.doFilter(request, response)")]),n._v(" 来传递给下一个 Filter 这种方式的。")]),n._v(" "),a("p",[n._v("我们用下面这张图结束本节。下图展示了传播的方法，但我其实是更想让大家看一下，哪些事件是 Inbound 类型的，哪些是 Outbound 类型的：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://www.javadoop.com/blogimages/netty-source/19.png",alt:"img"}})]),n._v(" "),a("p",[n._v("Outbound 类型的几个事件大家应该比较好认，注意 "),a("code",[n._v("bind")]),n._v(" 也是 Outbound 类型的")])])}),[],!1,null,null,null);a.default=e.exports}}]);