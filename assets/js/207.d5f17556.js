(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{557:function(a,s,t){"use strict";t.r(s);var e=t(0),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"学习方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习方法"}},[a._v("#")]),a._v(" "),s("strong",[a._v("学习方法")])]),a._v(" "),s("p",[a._v("SpringBoot工程是打包War包还是Jar包？")]),a._v(" "),s("p",[a._v("是不是经常会看到在工程中有的配置为 "),s("code",[a._v("<packaging>war</packaging>")]),a._v("，而有的则是配置为 "),s("code",[a._v("<packaging>jar</packaging>")]),a._v("？这是怎么回事呢？我们来深入探讨一下。")]),a._v(" "),s("p",[a._v('回顾一下以前的情景，对于使用 Spring 构建的 Web 工程，为了将一些资源文件，包括那些位于 "WEB-INF" 下的文件等，打包得体，通常选择默认的 war 包方式。然后将这个打包后的 war 文件放入 Tomcat 中进行部署，部署时自动解压缩，让应用在服务器上运行起来。不过，随着时间的推移，前后端分离和容器化技术的兴起，我们的选择也在发生变化。')]),a._v(" "),s("p",[a._v("如今，当我们使用 Spring Boot 构建项目时，有了更多的选择。为了适应前后端分离的架构以及容器化的需求，通常会选择将 Spring Boot 项目打包成 Jar 包。这个 Jar 包实际上是一个独立的可执行程序，类似于一个容器，里面包含了所有应用所需的依赖，让我们能够方便地将整个应用放入 Docker 这样的容器中，实现快速启动和管理。")]),a._v(" "),s("p",[a._v("因此，在本章中，我们也将会把名为 "),s("code",[a._v("api-gateway-engine")]),a._v(" 的网关引擎工程，精心地打包成 Jar 包，并将它放入 Docker 容器中启动。这种方式不仅使得我们的应用更加灵活和高效，也契合了现代化的开发和部署趋势。")]),a._v(" "),s("h2",{attrs:{id:"引擎工程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引擎工程"}},[a._v("#")]),a._v(" "),s("strong",[a._v("引擎工程")])]),a._v(" "),s("p",[a._v("api-gateway-engine 是一个用于启动网关算力服务的引擎工程，它的代码内容几乎没有多少，主要负责的是工程的启动操作。因为镜像的打包也是从这个工程中处理。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230825172609002.png",alt:"image-20230825172609002"}})]),a._v(" "),s("ul",[s("li",[s("p",[a._v("api-gateway-core 核心通信模块，处理网关的对接口的协议转换和映射操作以及泛化调用对应的 RPC 接口。")])]),a._v(" "),s("li",[s("p",[a._v("api-gateway-assist 将 api-gateway-core 包装，提供简化的使用方式。")])]),a._v(" "),s("li",[s("p",[a._v("那么现在 api-gateway-engin 则是一个打包的执行引擎工程，打包后提供可部署到容器的 Jar 包。")])])]),a._v(" "),s("h2",{attrs:{id:"功能实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能实现"}},[a._v("#")]),a._v(" "),s("strong",[a._v("功能实现")])]),a._v(" "),s("h3",{attrs:{id:"工程结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工程结构"}},[a._v("#")]),a._v(" "),s("strong",[a._v("工程结构")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230825172938172.png",alt:"image-20230825172938172"}})]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v(" 网关助手 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("cn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("cactusli"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("gateway"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("groupId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("api"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("gateway"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("assist"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("04")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("artifactId"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("SNAPSHOT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("version"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dependency"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("ul",[s("li",[s("p",[a._v("在 POM 中引用 "),s("code",[a._v("api-gateway-assist-04")]),a._v(" 的 Jar 包。—— 引入前记得你已经完成了 Install，并且是配置在同一个 Maven 仓库下。")])]),a._v(" "),s("li",[s("p",[a._v("源码：------")])])]),a._v(" "),s("h3",{attrs:{id:"dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[a._v("#")]),a._v(" "),s("strong",[a._v("Dockerfile")])]),a._v(" "),s("div",{staticClass:"language-dockerfile line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 基础镜像")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" openjdk:17.0.2-slim")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 作者")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("MAINTAINER")]),a._v(" cactusli")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 配置")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" PARAMS="),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 时区")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENV")]),a._v(" TZ=PRC")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("RUN")]),a._v(" ln -snf /usr/share/zoneinfo/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$TZ")]),a._v(" /etc/localtime && echo "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$TZ")]),a._v(" > /etc/timezone")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 添加应用")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ADD")]),a._v(" target/api-gateway-engine-*.jar /api-gateway-engine.jar")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行镜像")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ENTRYPOINT")]),a._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sh"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-c"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java -jar $JAVA_OPTS /api-gateway-engine.jar $PARAMS"')]),a._v("]")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("ul",[s("li",[a._v("这是一个用于打包工程的 Dockerfile 文件，最主要的就是添加你的应用 "),s("code",[a._v("ADD")]),a._v(" target/api-gateway-engine-*.jar /"),s("a",{attrs:{href:"http://api-gateway-engine.jar/",target:"_blank",rel:"noopener noreferrer"}},[a._v("api-gateway-engine.jar"),s("OutboundLink")],1)])]),a._v(" "),s("h3",{attrs:{id:"构建文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建文件"}},[a._v("#")]),a._v(" "),s("strong",[a._v("构建文件")])]),a._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" ./Dockerfile "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" api-gateway-engine:1.0.1 "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"启动脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动脚本"}},[a._v("#")]),a._v(" "),s("strong",[a._v("启动脚本")])]),a._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8018")]),a._v(":8018 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7399")]),a._v(":7399 "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--name")]),a._v(" api-gateway-engine "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" api-gateway-engine:1.0.1\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("ul",[s("li",[a._v("这里需要映射2个端口，一个是 8004 应用的端口，还有一个 7397 网关 Netty 服务的端口。")])]),a._v(" "),s("h2",{attrs:{id:"测试验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试验证"}},[a._v("#")]),a._v(" "),s("strong",[a._v("测试验证")])]),a._v(" "),s("h3",{attrs:{id:"前置条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置条件"}},[a._v("#")]),a._v(" "),s("strong",[a._v("前置条件")])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("因为网关需要部署到 Docker 那么就不能指定IP，因为这里的IP是自动分配的。所以需要把 api-gateway-core-09.GatewaySocketServer#bind方法处理下，只提供端口即可。b.bind(configuration.getPort()) —— 参考源码："),s("code",[a._v("cn.cactusli.gateway.core.socket.GatewaySocketServer#call")])])]),a._v(" "),s("li",[s("p",[a._v("启动 Docker 容器，因为打包镜像时候需要。")])]),a._v(" "),s("li",[s("p",[a._v("启动 ZK 注册中心")])]),a._v(" "),s("li",[s("p",[a._v("在3的步骤上，启动 api-gateway-test-provider 观察日志，确保 RPC 服务启动成功。")])]),a._v(" "),s("li",[s("p",[a._v("启动 api-gateway-center 注册中心，这样才能从注册中心拉取接口。")])]),a._v(" "),s("li",[s("p",[a._v("确保 api-gateway-core-09、api-gateway-assist-04、api-gateway-engine-01 都以此 clean 后并 install 打包了。—— 可以看下工程下的引用Jar里的信息。")])]),a._v(" "),s("li",[s("p",[a._v("更新 "),s("a",{attrs:{href:"http://api-gateway.sql/",target:"_blank",rel:"noopener noreferrer"}},[a._v("api-gateway.sql"),s("OutboundLink")],1),a._v(" 为最新的文件，记得把 SQL 更新到库后，一些配置【IP、应用、接口】修改为你的本地配置。"),s("strong",[a._v("SQL文件在api-gateway-engine-01工程下")])])])]),a._v(" "),s("h3",{attrs:{id:"网关镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网关镜像"}},[a._v("#")]),a._v(" "),s("strong",[a._v("网关镜像")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230828163659514.png",alt:"image-20230828163659514"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230828163812288.png",alt:"image-20230828163812288"}})]),a._v(" "),s("ul",[s("li",[a._v("你需要按照步骤分别进行打包工程、构建镜像，以及做镜像的部署操作。分别完成后就可以在 Portainer Docker 的管理后台看到 api-gateway-engine 的启动情况了，并且可以进行调用。")])]),a._v(" "),s("h3",{attrs:{id:"测试调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试调用"}},[a._v("#")]),a._v(" "),s("strong",[a._v("测试调用")])]),a._v(" "),s("p",[s("strong",[a._v("访问网关接口：http://192.168.1.107:7399/cactus/activity/sayHello")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230828163941260.png",alt:"image-20230828163941260"}})]),a._v(" "),s("h2",{attrs:{id:"本章小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本章小结"}},[a._v("#")]),a._v(" "),s("strong",[a._v("本章小结")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("本章的焦点集中在将 api-gateway-core、api-gateway-assist 和 api-gateway-engine 这三个工程紧密连接起来，通过将它们打包成镜像的方式来进行部署。这个过程就像是把一根线穿过整个系统，将核心的通信部分完美地呈现出来。")])]),a._v(" "),s("li",[s("p",[a._v("可以将这个过程类比为一条线索，这条线索将整个网关系统的最核心、最重要的通信部分连接在一起，所有传入的网络请求都会在这组工程中得到处理和解决。")])]),a._v(" "),s("li",[s("p",[a._v("然而，目前我们所完成的只是主干链路，就像一根主要的线索。一些分支细节功能，例如网关的动态拉取、插件等等，还尚未实现。这些功能就像是从主线索分支出来的侧枝，需要在以后的开发中逐步完善和实现。就像在拼图中填充细小的部分一样，这些功能将为整个系统增添更多的丰富性和功能性。")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);