(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{572:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"三、网络和存储原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、网络和存储原理"}},[s._v("#")]),s._v(" 三、网络和存储原理")]),s._v(" "),a("p",[a("strong",[s._v("问题：")])]),s._v(" "),a("ul",[a("li",[s._v("容器： 某个软件完整的运行环境；包含了一个小型的linux")]),s._v(" "),a("li",[s._v("系统宿主机里面同时4个nginx； 一个nginx运行时完整环境有20MB？\n"),a("ul",[a("li",[s._v("4个nginx 合起来占用多少的磁盘空间")]),s._v(" "),a("li",[s._v("80？一定会很大....")])])])]),s._v(" "),a("p",[a("strong",[s._v("docker装的和宿主机的优缺点：")]),s._v("\n优点：docker的移植性、便捷性高于在宿主机部署、进程隔离、很方便的资源限制缺点：docker虚拟化技术，损失不到3%的性能。                                      docker？原生物理机自己造docker这种东西。")]),s._v(" "),a("p",[a("strong",[s._v("镜像：容器；")])]),s._v(" "),a("p",[s._v("镜像（Image）：固定不变的。一个镜像可以启动很多容器\n容器（Container）：文件系统可能logs经常变化的，一个镜像可以启动很多容器。")]),s._v(" "),a("p",[s._v("docker在底层使用自己的存储驱动。来组件文件内容 storage drivers。docker 基于 AUFS（联合文件系统）；")]),s._v(" "),a("h2",{attrs:{id:"_1、docker存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、docker存储"}},[s._v("#")]),s._v(" 1、Docker存储")]),s._v(" "),a("h3",{attrs:{id:"_1、镜像如何存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、镜像如何存储"}},[s._v("#")]),s._v(" 1、镜像如何存储")]),s._v(" "),a("h4",{attrs:{id:"_0、自己探索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0、自己探索"}},[s._v("#")]),s._v(" "),a("strong",[s._v("0、自己探索")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("FROM busybox\nCMD "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" baidu.com\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("截取的nginx的分层")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-5.png",alt:""}})]),s._v(" "),a("blockquote",[a("p",[s._v("nginx这个镜像怎么存的")]),s._v(" "),a("p",[s._v("使用：docker image inspect nginx")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-6.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("指示了镜像怎么存的")]),s._v(";")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("LowerDir ：底层目录; diff（只是存储不同）；包含小型linux和装好的软件")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("/var/lib/docker/overlay2/67b3802c6bdb5bcdbcccbbe7aed20faa7227d584ab37668a03ff6952e 631f7f2/diff：用户文件；\n\n/var/lib/docker/overlay2/f56920fac9c356227079df41c8f4b056118c210bf4c50bd9bb077bdb4 c7524b4/diff： nginx的启动命令放在这里\n\n/var/lib/docker/overlay2/0e569a134838b8c2040339c4fdb1f3868a7118dd7f4907b40468f5fe6 0f055e5/diff： nginx的配置文件在这里\n\n/var/lib/docker/overlay2/2b51c82933078e19d78b74c248dec38164b90d80c1b42f0fdb1424953 207166e/diff: 小linux系统\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("倒着看")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("小linux系统（FROM apline） + Dockerfile的每一个命令可能都引起了系统的修改，所以和git\n一样，只记录变化")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-7.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("我们进入到这个镜像启动的容器，容器的文件系统就是镜像的；")])]),s._v(" "),a("li",[a("p",[s._v("docker ps -s；可以看到这个容器真正用到的文件大小")])]),s._v(" "),a("li",[a("p",[s._v("容器会自己建立层；如果想要改东西，把改的内容复制到容器层即可 docker inspect container")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LowerDir"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d462 c862f1e9a0562de2384dbc- init/diff:/var/lib/docker/overlay2/e3b8bdbb0cfbe5450696c470994b3f99e8a7942078e2639a788027529c6278f7/diff:/var/lib/docker/overlay2/67b3802c6bdb5bcdbcccbbe7aed20faa7227d584ab37668a03ff6952e631f7f2/diff:/var/lib/docker/overlay2/f56920fac9c356227079df41c8f4b056118c210bf4c50bd9bb077bdb4c7524b4/diff:/var/lib/docker/overlay2/0e569a134838b8c2040339c4fdb1f3868a7118dd7f4907b40468f5fe60f055e5/diff:/var/lib/docker/overlay2/2b51c82933078e19d78b74c248dec38164b90d80c1b42f0fdb1424953207166e/diff"')]),s._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MergedDir"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d462 c862f1e9a0562de2384dbc/merged"')]),s._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"UpperDir"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" （镜像的上层可以感知变化）"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d 462c862f1e9a0562de2384dbc/diff"')]),s._v(",【容器的修改后的文件，保存再宿主机哪里呀。容器删除后，那些容器目录还存在吗？一定不再】\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"WorkDir"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/overlay2/41e4fa41a2ad1dca9616d4c8254a04c4d9d6a3d462 c862f1e9a0562de2384dbc/work"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("MergedDir ：合并目录；容器最终的完整工作目录全内容都在合并层；数据卷在容器层产生；所有的增删改都在容器层；")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-8.png",alt:""}})])]),s._v(" "),a("li",[a("p",[s._v("UpperDir ：上层目录；")])]),s._v(" "),a("li",[a("p",[s._v("WorkDir ：工作目录（临时层），pid；")])])]),s._v(" "),a("blockquote",[a("p",[s._v("LowerDir（底层）\\UpperDir（）\\MergedDir\\WorkDir(临时东西)")]),s._v(" "),a("p",[s._v("docker底层的 storage driver完成了以上的目录组织结果；")])]),s._v(" "),a("p",[s._v("哪些东西适合容器运行？")]),s._v(" "),a("ul",[a("li",[s._v("docker启动一个MySQL，默认什么都不做？")]),s._v(" "),a("li",[s._v("MySQL就会丢失数据\n"),a("ul",[a("li",[s._v("文件挂载")]),s._v(" "),a("li",[s._v("docker commit：能提交，MySQL的容器，也能提交。100G；100G")])])])]),s._v(" "),a("h4",{attrs:{id:"_1、images-and-layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、images-and-layers"}},[s._v("#")]),s._v(" 1、Images and layers")]),s._v(" "),a("p",[s._v("Docker映像由一系列层组成。 每层代表图像的Dockerfile中的一条指令。 除最后一层外的每一层都是只读的。 如以下Dockerfile：")]),s._v(" "),a("p",[a("strong",[s._v("Dockerfile文件里面几句话，镜像就有几层")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("FROM ubuntu:15.04\nCOPY "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" /app\nRUN "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" /app\nCMD python /app/app.py\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每一个指令都可能会引起镜像改变，这些改变类似git的方式逐层叠加。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("ul",[a("li",[s._v("该Dockerfile包含四个命令，每个命令创建一个层。")]),s._v(" "),a("li",[s._v("FROM语句从ubuntu：15.04映像创建一个图层开始。")]),s._v(" "),a("li",[s._v("COPY命令从Docker客户端的当前目录添加一些文件。")]),s._v(" "),a("li",[s._v("RUN命令使用make命令构建您的应用程序。")]),s._v(" "),a("li",[s._v("最后，最后一层指定要在容器中运行的命令。")]),s._v(" "),a("li",[s._v("每一层只是与上一层不同的一组。 这些层彼此堆叠。")]),s._v(" "),a("li",[s._v("创建新容器时，可以在基础层之上添加一个新的可写层。 该层通常称为“容器层”。 对运行中的容器所做的所有更改（例如写入新文件，修改现有文件和删除文件）都将写入此薄可写容 器层。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-9.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"_2、container-and-layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、container-and-layers"}},[s._v("#")]),s._v(" 2、Container and layers")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("容器和镜像之间的主要区别是可写顶层。")]),s._v(" "),a("li",[s._v("在容器中添加新数据或修改现有数据的所有写操作都存储在此可写层中。")]),s._v(" "),a("li",[s._v("删除容器后，可写层也会被删除。 基础图像保持不变。 因为每个容器都有其自己的可写容器层，并且所有更改都存储在该容器层中，所以多个容器可以共享对同一基础映像的访问， 但具有自己的数据状态。")])])]),s._v(" "),a("p",[a("strong",[s._v("下图显示了共享同一Ubuntu 15.04映像的多个容器")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-10.png",alt:""}})]),s._v(" "),a("h4",{attrs:{id:"_3、磁盘容量预估"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、磁盘容量预估"}},[s._v("#")]),s._v(" 3、磁盘容量预估")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-s")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#size：用于每个容器的可写层的数据量（在磁盘上）。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#irtual size：容器使用的用于只读图像数据的数据量加上容器的可写图层大小。多个容器可以共享部分或全部只读图像数据。从同一图像开始的两个容器共享100％的只读数据，而具有不同图像的两个容器（具有相同的层）共享这些公共层。因此，不能只对虚拟大小进行总计。这高估了总磁盘使用量，可能是一笔不小的数目。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"_4、镜像如何挑选"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、镜像如何挑选"}},[s._v("#")]),s._v(" 4、镜像如何挑选")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#busybox：是一个集成了一百多个最常用Linux命令和工具的软件。linux工具里的瑞士军刀")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#alpine：Alpine操作系统是一个面向安全的轻型Linux发行版经典最小镜像，基于busybox，功能比Busybox完善。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#slim：docker hub中有些镜像有slim标识，都是瘦身了的镜像。也要优先选择")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#无论是制作镜像还是下载镜像，优先选择alpine类型.")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"_5、copy-on-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、copy-on-write"}},[s._v("#")]),s._v(" 5、Copy On Write")]),s._v(" "),a("ul",[a("li",[s._v("写时复制是一种共享和复制文件的策略，可最大程度地提高效率。")]),s._v(" "),a("li",[s._v("如果文件或目录位于映像的较低层中，而另一层（包括可写层）需要对其进行读取访问，则它仅使 用现有文件。")]),s._v(" "),a("li",[s._v("另一层第一次需要修改文件时（在构建映像或运行容器时），将文件复制到该层并进行修改。 这样可以将I / O和每个后续层的大小最小化。")])]),s._v(" "),a("h3",{attrs:{id:"_2、容器如何挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器如何挂载"}},[s._v("#")]),s._v(" 2、容器如何挂载")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-11.jpg",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("每一个容器里面的内容，支持三种挂载方式：")])]),s._v(" "),a("ol",[a("li",[s._v("docker自动在外部创建文件夹自动挂载容器内部指定的文件夹内容【Dockerfile VOLUME指令的作用】")]),s._v(" "),a("li",[s._v("自己在外部创建文件夹，手动挂载")]),s._v(" "),a("li",[s._v("可以把数据挂载到内存中。")]),s._v(" "),a("li",[s._v("--mount 挂载到 linux宿主机，手动挂载（不用了）")]),s._v(" "),a("li",[s._v("-v 可以自动挂载，到linux'主机或者docker自动管理的这一部分区域")])]),s._v(" "),a("p",[a("strong",[s._v("Volumes(卷)")]),s._v(": 存储在主机文件系统的一部分中，该文件系统由Docker管理（在Linux上是“ / var / lib / docker / volumes /”）。 非Docker进程不应修改文件系统的这一部分。 卷是在Docker中持久存储数据的最佳方法。")]),s._v(" "),a("p",[a("strong",[s._v("Bind mounts(绑定挂载)")]),s._v(": 可以在任何地方 存储在主机系统上。 它们甚至可能是重要的系统文件或目录。 Docker主机或Docker容器上的非Docker进程可以随时对其进行修改。")]),s._v(" "),a("p",[a("strong",[s._v("tmpfs mounts(临时挂载)")]),s._v("：仅存储在主机系统的内存中，并且永远不会写入主机系统的文件系统")]),s._v(" "),a("h5",{attrs:{id:"_1、volume-卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、volume-卷"}},[s._v("#")]),s._v(" 1、volume(卷)")]),s._v(" "),a("p",[a("strong",[s._v("匿名卷使用")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" :/etc/nginx nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#docker将创建出匿名卷，并保存容器/etc/nginx下面的内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v 宿主机:容器里的目录")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("具名卷使用")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" nginx:/etc/nginx nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#docker将创建出名为nginx的卷，并保存容器/etc/nginx下面的内容")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("如果将空卷装入存在文件或目录的容器中的目录中，则容器中的内容（复制）到该卷中。")]),s._v(" "),a("p",[s._v("如果启动一个容器并指定一个尚不存在的卷，则会创建一个空卷。")])]),s._v(" "),a("p",[a("strong",[s._v("-v 宿主机绝对路径:Docker容器内部绝对路径：叫挂载；这个有空挂载问题")]),s._v(" "),a("strong",[s._v("-v 不以/开头的路径:Docker容器内部绝对路径：叫绑定（docker会自动管理，docker不会把他当前目录，而把它当前卷）")])]),s._v(" "),a("p",{staticStyle:{"background-color":"#3CB371"}},[s._v("以上用哪个比较好？？？？？？")]),s._v(" "),a("ul",[a("li",[s._v("如果自己开发测试，用 -v 绝对路径的方式")]),s._v(" "),a("li",[s._v("如果是生产环境建议用卷")]),s._v(" "),a("li",[s._v("除非特殊 /bin/docker 需要挂载主机路径的则操作 绝对路径挂载")])]),s._v(" "),a("p",[a("strong",[s._v("nginx--Docker")])]),s._v(" "),a("p",[a("strong",[s._v("/usr/share/nginx/html")])]),s._v(" "),a("p",[a("font",{attrs:{color:"#FF3399"}},[s._v("nginx测试html挂载几种不同情况： ")])],1),s._v(" "),a("ul",[a("li",[a("p",[s._v("不挂载 效果：访问默认欢迎页")])]),s._v(" "),a("li",[a("p",[s._v("-v /root/html:/usr/share/nginx/html 效果：访问forbidden")])]),s._v(" "),a("li",[a("p",[s._v("-v html:/usr/share/nginx/html:ro 效果：访问默认欢迎页")])]),s._v(" "),a("li",[a("p",[s._v("-v\t/usr/share/nginx/html\t效果：匿名卷 （什么都不写也不要加冒号，直接写容器内的目录）")])]),s._v(" "),a("li",[a("p",[s._v("原因：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("-v html:/usr/share/nginx/html； docker inspect 容器的时候； docker自动管理的方式")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v不以绝对路径方式；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 1、先在docker底层创建一个你指定名字的卷（具名卷） html")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 2、把这个卷和容器内部目录绑定")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 3、容器启动以后，目录里面的内容就在卷里面存着； ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#####-v nginxhtml:/usr/share/nginx/html 也可以以下操作")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 1、 docker create volume nginxhtml 如果给卷里面就行修改，容器内部的也就改了。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 2、 docker volume inspect nginxhtml")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 3、docker run -d -P -v nginxhtml:/usr/share/nginx/html -- name=nginx777 nginx")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以看到")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mounts"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"volume"')]),s._v(", //这是个卷\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"html"')]),s._v(", //名字是html\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Source"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/volumes/html/_data"')]),s._v(", //宿主机的目录。容器里面的哪两个文件都在\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Destination"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/share/nginx/html"')]),s._v(", //容器内部\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Driver"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),s._v(",\n            "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mode"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"z"')]),s._v(",\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"RW"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" true, //读写模式\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Propagation"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#卷：就是为了保存数据")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#可以对docker自己管理的卷目录进行操作；")]),s._v("\n/var/lib/docker/volumes "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#(卷的根目录)")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])])])])])]),s._v(" "),a("h5",{attrs:{id:"_2、bind-mount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、bind-mount"}},[s._v("#")]),s._v(" 2、bind mount")]),s._v(" "),a("blockquote",[a("p",[s._v("如果将绑定安装或非空卷安装到存在某些文件或目录的容器中的目录中，则这些文件或目录会被 安装遮盖，就像您将文件保存到Linux主机上的/ mnt中一样，然后 将USB驱动器安装到/ mnt中。在卸载USB驱动器之前，/ mnt的内容将被USB驱动器的内容遮盖。 被遮盖的文件不会被删除或更改，但是在安装绑定安装或卷时将无法访问。")]),s._v(" "),a("p",[s._v("总结：外部目录覆盖内部容器目录内容，但不是修改。所以谨慎，外部空文件夹挂载方式也会导 致容器内部是空文件夹")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-dP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" /my/nginx:/etc/nginx:ro nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bind mount和 volumes 的方式写法区别在于")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所有以/开始的都认为是 bind mount ，不以/开始的都认为是 volumes.")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("警惕bind mount 方式，文件挂载没有在外部准备好内容而导致的容器启动失败问题")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一行命令启动nginx，并且配置文件和html页面。需要知道卷的位置才能改")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" nginxconf:/etc/nginx/ "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v(" nginxpage:/usr/share/nginx/html nginx \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 想要实现 docker run -d -P -v /root/nginxconf:/etc/nginx/ -v")]),s._v("\n/root/nginxhtml:/usr/share/nginx/html "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx999 nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 1、提前准备好东西 目录nginxconf，目录里面的配置we年都放里面，，再调用命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 2、docker cp nginxdemo:/etc/nginx /root/nginxconf #注意/的使用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("### 3、docker run -d -P -v /root/nginxconf:/etc/nginx/ -v")]),s._v("\n/root/nginxhtml:/usr/share/nginx/html "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx999 nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"_3、管理卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、管理卷"}},[s._v("#")]),s._v(" 3、管理卷")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume create xxx：创建卷名\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume inspect xxx：查询卷详情\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume ls: 列出所有卷\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume prune: 移除无用卷\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h5",{attrs:{id:"_4、docker-cp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、docker-cp"}},[s._v("#")]),s._v(" 4、docker cp")]),s._v(" "),a("p",[a("font",{attrs:{color:"#00008B"}},[a("strong",[s._v("cp的细节")])])],1),s._v(" "),a("blockquote",[a("p",[s._v("docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- ：把容器里面的复制出来")]),s._v(" "),a("p",[s._v("docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH：把外部的复制进去")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("SRC_PATH指定为一个文件")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("DEST_PATH 不存在：文件名为DEST_PATH内容为SRC的内容")])]),s._v(" "),a("li",[a("strong",[s._v("DEST_PATH 不存在并且以\t结尾：报错")])]),s._v(" "),a("li",[a("strong",[s._v("DEST_PATH 存在并且是文件：目标文件内容被替换为SRC_PATH的文件内容。")])]),s._v(" "),a("li",[a("strong",[s._v("DEST_PATH 存在并且是目录：文件复制到目录内，文件名为SRC_PATH指定的名字")])])])]),s._v(" "),a("li",[a("strong",[s._v("SRC_PATH 指定为一个目录")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("DEST_PATH不存在： DEST_PATH 创建文件夹，复制源文件夹内的所有内容")])]),s._v(" "),a("li",[a("strong",[s._v("DEST_PATH 存在是文件：报错")])]),s._v(" "),a("li",[a("strong",[s._v("DEST_PATH存在是目录")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("SRC_PATH 不以 /. 结束：源文件夹复制到目标里面")])]),s._v(" "),a("li",[a("strong",[s._v("SRC_PATH 以 /. 结束：源文件夹里面的内容复制到目标里面")])])])])])])]),s._v(" "),a("p",[a("strong",[s._v("自动创建文件夹不会做递归。把父文件夹做好")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker cp index.html mynginx4:/usr/share/nginx/html \ndocker cp mynginx4:/etc/nginx/nginx.conf nginx.conf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"_2、docker网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、docker网络"}},[s._v("#")]),s._v(" 2、Docker网络")]),s._v(" "),a("h3",{attrs:{id:"_1、端口映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、端口映射"}},[s._v("#")]),s._v(" 1、端口映射")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v(":3306 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" hello-mysql mysql:5.7\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2、容器互联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器互联"}},[s._v("#")]),s._v(" 2、容器互联")]),s._v(" "),a("p",[a("font",{attrs:{color:"#FF7F50"}},[s._v("--link name:alias")]),s._v(" ，name连接容器的名称，alias连接的别名")],1),s._v(" "),a("p",[s._v("场景：我们无需暴露mysql的情况下，让web应用使用mysql；")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123456")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" mysql01 mysql:5.7\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--link")]),s._v(" mysql01:mysql "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" tomcat tomcat:7\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" tomcat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/hosts\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" mysql\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_3、自定义网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义网络"}},[s._v("#")]),s._v(" 3、自定义网络")]),s._v(" "),a("h4",{attrs:{id:"_1、默认网络原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、默认网络原理"}},[s._v("#")]),s._v(" 1、默认网络原理")]),s._v(" "),a("p",[a("strong",[s._v("Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/docker-12.jpg",alt:""}})]),s._v(" "),a("p",[s._v("Linux虚拟网络技术。")]),s._v(" "),a("p",[a("strong",[s._v("Docker容器网络就很好的利用了Linux虚拟网络技术，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫veth pair）；")])]),s._v(" "),a("p",[a("strong",[s._v("Docker中的网络接口默认都是虚拟的接口。虚拟接口的优势就是转发效率极高（因为Linux是在内核中进 行数据的复制来实现虚拟接口之间的数据转发，无需通过外部的网络设备交换），对于本地系统和容器 系统来说，虚拟接口跟一个正常的以太网卡相比并没有区别，只是他的速度快很多。")])]),s._v(" "),a("p",[s._v("原理：")]),s._v(" "),a("ol",[a("li",[s._v("每一个安装了Docker的linux主机都有一个docker0的虚拟网卡。桥接网卡")]),s._v(" "),a("li",[s._v("每启动一个容器linux主机多了一个虚拟网卡。")]),s._v(" "),a("li",[s._v("docker run -d  -P  --name tomcat --net bridge tomcat:8")])]),s._v(" "),a("h4",{attrs:{id:"_2、网络模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、网络模式"}},[s._v("#")]),s._v(" 2、网络模式")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[s._v("网络模式")])]),s._v(" "),a("th",[a("strong",[s._v("配置")])]),s._v(" "),a("th",[a("strong",[s._v("说明")])])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("bridge模式")]),s._v(" "),a("td",[s._v("--net=bridge")]),s._v(" "),a("td",[s._v("默认值，在Docker网桥docker0上为容器创建新的网络栈")])]),s._v(" "),a("tr",[a("td",[s._v("none模式")]),s._v(" "),a("td",[s._v("--net=none")]),s._v(" "),a("td",[s._v("不配置网络，用户可以稍后进入容器，自行配置")])]),s._v(" "),a("tr",[a("td",[s._v("container模式")]),s._v(" "),a("td",[s._v("--net=container:name/id")]),s._v(" "),a("td",[s._v("容器和另外一个容器共享Network namespace。kubernetes中的pod就是多个容器共享一个Network namespace。")])]),s._v(" "),a("tr",[a("td",[s._v("host模式")]),s._v(" "),a("td",[s._v("--net=host")]),s._v(" "),a("td",[s._v("容器和宿主机共享Network namespace；")])]),s._v(" "),a("tr",[a("td",[s._v("用户自定义")]),s._v(" "),a("td",[s._v("--net=mynet")]),s._v(" "),a("td",[s._v("用户自己使用network相关命令定义网络， 创建容器的时候可以指定为自己定义的网络")])])])]),s._v(" "),a("h4",{attrs:{id:"_3、自建网络测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、自建网络测试"}},[s._v("#")]),s._v(" 3、自建网络测试")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1、docker0网络的特点。，")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#默认、域名访问不通、--link 域名通了，但是删了又不行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2、可以让容器创建的时候使用自定义网络，用自定义 ")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#1、自定义创建的默认default "bridge"')]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2、自定义创建一个网络网络")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--driver")]),s._v(" bridge "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--subnet")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.0/16 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--gateway")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.1 mynet "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所有东西实时维护好，直接域名ping通")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network connect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" NETWORK CONTAINER\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3、跨网络连接别人就用。把tomcat加入到mynet网络")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network connect mynet tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#效果：")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1、自定义网络，默认都可以用主机名访问通")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2、跨网络连接别人就用 ")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network connect mynet tomcat \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#4、命令")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1、容器启动，指定容器ip。 ")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--ip")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.3 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--net")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#自定义网络")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#2、创建子网。")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--subnet")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#指定子网范围 --driver bridge 所有东西实时维护好，直接域名ping通")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3、docker compose 中的网络默认就是自定义网络方式。")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-P")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--network")]),s._v(" 自定义网络名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("提前创建"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);