(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{627:function(_,e,v){"use strict";v.r(e);var t=v(0),s=Object(t.a)({},(function(){var _=this,e=_._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"一、kubernetes简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、kubernetes简介"}},[_._v("#")]),_._v(" 一、Kubernetes简介")]),_._v(" "),e("h2",{attrs:{id:"_1、背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、背景"}},[_._v("#")]),_._v(" 1、背景")]),_._v(" "),e("h1",{attrs:{id:"_1、部署方式的变迁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、部署方式的变迁"}},[_._v("#")]),_._v(" 1、部署方式的变迁")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/container_evolution.svg",alt:"部署演进"}})]),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("传统部署时代：")])]),_._v(" "),e("ul",[e("li",[_._v("在物理服务器上运行应用程序")]),_._v(" "),e("li",[_._v("无法为应用程序定义资源边界")]),_._v(" "),e("li",[_._v("导致资源分配问题\n"),_._v("\n例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩展， 并且维护许多物理服务器的成本很高。")])])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("虚拟化部署时代：")])]),_._v(" "),e("ul",[e("li",[_._v("作为解决方案，引入了虚拟化")]),_._v(" "),e("li",[_._v("虚拟化技术允许你在单个物理服务器的 CPU 上运行多个虚拟机（VM）")]),_._v(" "),e("li",[_._v("虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全")]),_._v(" "),e("li",[_._v("一个应用程序的信息 不能被另一应用程序随意访问。")]),_._v(" "),e("li",[_._v("虚拟化技术能够更好地利用物理服务器上的资源")]),_._v(" "),e("li",[_._v("因为可轻松地添加或更新应用程序 ，所以可以实现更好的可伸缩性，降低硬件成本等等。")]),_._v(" "),e("li",[_._v("每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。")])])])]),_._v(" "),e("p",[_._v("缺点：虚拟层冗余导致的资源浪费与性能下降")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("容器部署时代：")]),_._v(" "),e("ul",[e("li",[_._v("容器类似于 VM，但可以在应用程序之间共享操作系统（OS）。")]),_._v(" "),e("li",[_._v("容器被认为是轻量级的。")]),_._v(" "),e("li",[_._v("容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。")]),_._v(" "),e("li",[_._v("由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植。")]),_._v(" "),e("li",[e("em",[e("u",[e("strong",[_._v("参照【Docker隔离原理- namespace 6项隔离（资源隔离）与 cgroups 8项资源限制（资源限制）】")])])])])])])]),_._v(" "),e("p",[_._v("裸金属：真正的物理服务器")]),_._v(" "),e("p",[e("strong",[_._v("容器优势：")])]),_._v(" "),e("ul",[e("li",[_._v("敏捷性：敏捷应用程序的创建和部署：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。")]),_._v(" "),e("li",[_._v("及时性：持续开发、集成和部署：通过快速简单的回滚（由于镜像不可变性），支持可靠且频繁的 容器镜像构建和部署。")]),_._v(" "),e("li",[_._v("解耦性：关注开发与运维的分离：在构建/发布时创建应用程序容器镜像，而不是在部署时。 从而将应用程序与基础架构分离。")]),_._v(" "),e("li",[_._v("可观测性：可观察性不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。")]),_._v(" "),e("li",[_._v("跨平台：跨开发、测试和生产的环境一致性：在便携式计算机上与在云中相同地运行。")]),_._v(" "),e("li",[_._v("可移植：跨云和操作系统发行版本的可移植性：可在 Ubuntu、RHEL、CoreOS、本地、 Google Kubernetes Engine 和其他任何地方运行。")]),_._v(" "),e("li",[_._v("简易性：以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。")]),_._v(" "),e("li",[_._v("大分布式：松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分， 并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。")]),_._v(" "),e("li",[_._v("隔离性：资源隔离：可预测的应用程序性能。")]),_._v(" "),e("li",[_._v("高效性："),e("strong",[_._v("资源利用：高效率和")]),_._v("高密度")])]),_._v(" "),e("p",[_._v("K8S之前：")]),_._v(" "),e("p",[_._v("10台服务器：25+15中间件")]),_._v(" "),e("p",[_._v("K8S之后：")]),_._v(" "),e("p",[_._v("10台服务器：上百个应用了。")]),_._v(" "),e("p",[_._v("k8s管理10几台服务器。资源规划。")]),_._v(" "),e("h3",{attrs:{id:"_2、容器化问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器化问题"}},[_._v("#")]),_._v(" 2、容器化问题")]),_._v(" "),e("ul",[e("li",[_._v("弹性的容器化应用管理")]),_._v(" "),e("li",[_._v("强大的故障转移能力")]),_._v(" "),e("li",[_._v("高性能的负载均衡访问机制")]),_._v(" "),e("li",[_._v("便捷的扩展")]),_._v(" "),e("li",[_._v("自动化的资源监测")]),_._v(" "),e("li",[_._v("......")])]),_._v(" "),e("p",[_._v("docker swarm：大规模进行容器编排")]),_._v(" "),e("p",[_._v("mesos：apache")]),_._v(" "),e("p",[_._v("Kubernetes : google；")]),_._v(" "),e("p",[_._v("竞品： Kubernetes 胜利")]),_._v(" "),e("h3",{attrs:{id:"_3、为什么用-kubernetes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、为什么用-kubernetes"}},[_._v("#")]),_._v(" 3、为什么用 Kubernetes")]),_._v(" "),e("p",[_._v("容器是打包和运行应用程序的好方式。在生产环境中，你需要管理运行应用程序的容器，并确保不会停机。 例如，如果一个容器发生故障，则需要启动另一个容器。如果系统处理此行为，会不会更容易？")]),_._v(" "),e("p",[_._v("这就是 Kubernetes 来解决这些问题的方法！ Kubernetes 为你提供了一个可弹性运行分布式系统的框架。linux之上的一个服务编排框架；")]),_._v(" "),e("p",[_._v("Kubernetes 会满足你的扩展要求、故障转移、部署模式等。 例如，Kubernetes 可以轻松管理系统的 Canary 部署。")]),_._v(" "),e("p",[_._v("Kubernetes 为你提供：")]),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("服务发现和负载均衡")])]),_._v(" "),e("p",[_._v("Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("存储编排")])]),_._v(" "),e("p",[_._v("Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("自动部署和回滚")])]),_._v(" "),e("p",[_._v("你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("自动完成装箱计算")])]),_._v(" "),e("p",[_._v("Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("自我修复")])]),_._v(" "),e("p",[_._v("Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("密钥与配置管理")])]),_._v(" "),e("p",[_._v("Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥")])]),_._v(" "),e("li",[e("p",[_._v(".......")])])]),_._v(" "),e("p",[e("strong",[_._v("为了生产环境的容器化大规模应用编排，必须有一个自动化的框架。系统")])]),_._v(" "),e("h3",{attrs:{id:"_4、市场份额"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、市场份额"}},[_._v("#")]),_._v(" 4、市场份额")]),_._v(" "),e("h4",{attrs:{id:"_1、容器化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、容器化"}},[_._v("#")]),_._v(" 1、容器化")]),_._v(" "),e("p",[_._v("docker swarm")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/9e637c54459c61c8f1879c3527f9b78a.png",alt:""}})]),_._v(" "),e("h4",{attrs:{id:"_2、服务编排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、服务编排"}},[_._v("#")]),_._v(" 2、服务编排")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://lixuanfengs.github.io/blog-images/cactus-vuepress-img/4da21bc4c1cda04e485b335100ae02b3.png-wh_600x-s_704737526.png",alt:"img"}})]),_._v(" "),e("p",[_._v("google --- kubernetes --- 发起cncf --- 众多的项目辅佐 kubernetes ---- kubernetes +cncf其他软件 = 整个大型云平台")]),_._v(" "),e("h2",{attrs:{id:"_2、简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、简介"}},[_._v("#")]),_._v(" 2、简介")]),_._v(" "),e("p",[_._v("Kubernetes 是一个可移植的、可扩展的"),e("strong",[_._v("开源")]),_._v("平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用。")]),_._v(" "),e("p",[_._v("名称 "),e("strong",[_._v("Kubernetes")]),_._v(" 源于希腊语，意为“舵手”或“飞行员”。Google 在 2014 年开源了 Kubernetes 项目。 Kubernetes 建立在 "),e("a",{attrs:{href:"https://research.google/pubs/pub43438",target:"_blank",rel:"noopener noreferrer"}},[_._v("Google 在大规模运行生产工作负载方面拥有十几年的经验"),e("OutboundLink")],1),_._v(" 的基础上，结合了社区中最好的想法和实践。")]),_._v(" "),e("h3",{attrs:{id:"_1、kubernetes不是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、kubernetes不是什么"}},[_._v("#")]),_._v(" 1、Kubernetes不是什么")]),_._v(" "),e("ul",[e("li",[_._v("Kubernetes 不是传统的、包罗万象的 PaaS（平台即服务）系统。")]),_._v(" "),e("li",[_._v("Kubernetes 在容器级别而不是在硬件级别运行")]),_._v(" "),e("li",[_._v("它提供了 PaaS 产品共有的一些普遍适用的功能， 例如部署、扩展、负载均衡、日志记录和监视。")]),_._v(" "),e("li",[_._v("但是，Kubernetes 不是单体系统，默认解决方案都是可选和可插拔的。 Kubernetes 提供了构建开发人员平台的基础，但是在重要的地方保留了用户的选择和灵活性。")])]),_._v(" "),e("p",[_._v("Kubernetes：")]),_._v(" "),e("ul",[e("li",[e("p",[e("strong",[_._v("不限制支持的应用程序类型")]),_._v("。 Kubernetes 旨在支持极其多种多样的工作负载，包括无状态、有状态和数据处理工作负载。 如果应用程序可以在容器中运行，那么它应该可以在 Kubernetes 上很好地运行。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("不部署源代码")]),_._v("，也不构建你的应用程序。 **持续集成(CI)、交付和部署（CI/CD）**工作流取决于组织的文化和偏好以及技术要求。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("不提供应用程序级别的服务作为内置服务")]),_._v("，例如中间件（例如，消息中间件）、 数据处理框架（例如，Spark）、数据库（例如，mysql）、缓存、集群存储系统 （例如，Ceph）。这样的组件可以在 Kubernetes 上运行，并且/或者可以由运行在 Kubernetes 上的应用程序通过可移植机制（例如， "),e("a",{attrs:{href:"https://openservicebrokerapi.org/",target:"_blank",rel:"noopener noreferrer"}},[_._v("开放服务代理"),e("OutboundLink")],1),_._v("）来访问。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("不要求日志记录、监视或警报解决方案")]),_._v("。 它提供了一些集成作为概念证明，并提供了收集和导出指标的机制。")])]),_._v(" "),e("li",[e("p",[e("strong",[_._v("不提供或不要求配置语言/系统")]),_._v("（例如 jsonnet），它提供了"),e("strong",[_._v("声明性 API")]),_._v("， 该声明性 API 可以由任意形式的声明性规范所构成。RESTful；写yaml文件")])]),_._v(" "),e("li",[e("p",[_._v("不提供也不采用任何全面的机器配置、维护、管理或自我修复系统。")])]),_._v(" "),e("li",[e("p",[_._v("此外，Kubernetes 不仅仅是一个编排系统，实际上它消除了编排的需要。 编排的技术定义是执行已定义的工作流程：首先执行 A，然后执行 B，再执行 C。 相比之下，Kubernetes 包含一组独立的、可组合的控制过程， 这些过程连续地将当前状态驱动到所提供的所需状态。 如何从 A 到 C 的方式无关紧要，也不需要集中控制，这使得系统更易于使用 且功能更强大、系统更健壮、更为弹性和可扩展。")])])]),_._v(" "),e("p",[_._v("容器管家：")]),_._v(" "),e("p",[_._v("安装了很多应用。  \t -------------------------  qq电脑管家。（自动杀垃圾，自动卸载没用东西....）")]),_._v(" "),e("p",[_._v("机器上有很多容器。 --------------------------  kubernete容器的管家。（容器的启动停止、故障转义、负载均衡等）")])])}),[],!1,null,null,null);e.default=s.exports}}]);