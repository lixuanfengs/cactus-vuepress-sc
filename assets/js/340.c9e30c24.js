(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{690:function(t,e,s){"use strict";s.r(e);var n=s(0),l=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("目前我们所有客户端请求都是通过微服务网关转发完成的，虽然我们约定如此，但是还是可以直接通过访问微服务地址的方式来获取服务，比如直接使用PostMan发送 "),e("a",{attrs:{href:"localhost:8202/hello"}},[t._v("localhost:8202/hello")]),t._v(" GET请求：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://s2.ax1x.com/2019/08/12/ezCQiD.png",alt:"74.png"}})]),t._v(" "),e("p",[t._v("可以看到直接访问的方式也能成功调用服务。为了避免客户端请求绕过网关，直接调用微服务，我们可以做一些处理来解决这个问题。")]),t._v(" "),e("h2",{attrs:{id:"自定义zuul过滤器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义zuul过滤器"}},[t._v("#")]),t._v(" 自定义Zuul过滤器")]),t._v(" "),e("p",[t._v("解决这个问题的大致思路是：在网关转发请求前，请求头部加入网关信息，然后在处理请求的微服务模块里定义全局拦截器，校验请求头部的网关信息，这样就能避免客户端直接访问微服务了。")]),t._v(" "),e("p",[t._v("在自定义Zuul过滤器前，我们先来简单了解下Zuul的核心过滤器。Zuul中默认定义了4种不同生命周期的过滤器类型，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://s2.ax1x.com/2019/08/12/ezARG8.png",alt:"75.png"}})]),t._v(" "),e("p",[t._v("这4种过滤器处于不同的生命周期，所以其职责也各不相同：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("PRE")]),t._v("：PRE过滤器用于将请求路径与配置的路由规则进行匹配，以找到需要转发的目标地址，并做一些前置加工，比如请求的校验等；")]),t._v(" "),e("li",[e("strong",[t._v("ROUTING")]),t._v("：ROUTING过滤器用于将外部请求转发到具体服务实例上去；")]),t._v(" "),e("li",[e("strong",[t._v("POST")]),t._v("：POST过滤器用于将微服务的响应信息返回到客户端，这个过程种可以对返回数据进行加工处理；")]),t._v(" "),e("li",[e("strong",[t._v("ERROR")]),t._v("：上述的过程发生异常后将调用ERROR过滤器。ERROR过滤器捕获到异常后需要将异常信息返回给客户端，所以最终还是会调用POST过滤器。")])]),t._v(" "),e("p",[t._v("Spring Cloud Zuul为各个生命周期阶段实现了一批过滤器，如下所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://s2.ax1x.com/2019/08/12/ezENes.png",alt:"76.png"}})]),t._v(" "),e("p",[t._v("这些过滤器的优先级和作用如下表所示：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("生命周期")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("优先级")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("过滤器")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("pre")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("ServletDetectionFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("标记处理Servlet的类型")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("pre")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Servlet30WrapperFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("包装HttpServletRequest请求")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("pre")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("FormBodyWrapperFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("包装请求体")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("route")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("DebugFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("标记调试标志")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("route")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("PreDecorationFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("处理请求上下文供后续使用")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("route")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("RibbonRoutingFilte")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("serviceId请求转发")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("route")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SimpleHostRoutingFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("url请求转发")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("route")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("50")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SendForwardFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("forward请求转发")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("post")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SendErrorFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("处理有错误的请求响应")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("post")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("SendResponseFilter")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("处理正常的请求响应")])])])]),t._v(" "),e("p",[t._v("从上面的表格可以看到，"),e("code",[t._v("PreDecorationFilter")]),t._v("用于处理请求上下文，优先级为5，所以我们可以定义一个优先级在"),e("code",[t._v("PreDecorationFilter")]),t._v("之后的过滤器，这样便可以拿到请求上下文。")]),t._v(" "),e("p",[t._v("在febs-gateway模块的cc.mrbird.febs.gateway.filter路径下新建"),e("code",[t._v("FebsGatewayRequestFilter")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Slf4j\n@Component\npublic class FebsGatewayRequestFilter extends ZuulFilter {\n\n    @Override\n    public String filterType() {\n        return FilterConstants.PRE_TYPE;\n    }\n\n    @Override\n    public int filterOrder() {\n        return 6;\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public Object run() {\n        RequestContext ctx = RequestContext.getCurrentContext();\n        String serviceId = (String) ctx.get(FilterConstants.SERVICE_ID_KEY);\n        HttpServletRequest request = ctx.getRequest();\n        String host = request.getRemoteHost();\n        String method = request.getMethod();\n        String uri = request.getRequestURI();\n       \n        log.info("请求URI：{}，HTTP Method：{}，请求IP：{}，ServerId：{}", uri, method, host, serviceId);\n        \n        byte[] token = Base64Utils.encode(("febs:zuul:123456").getBytes());\n        ctx.addZuulRequestHeader("ZuulToken", new String(token));\n        return null;\n    }\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br")])]),e("p",[t._v("自定义Zuul过滤器需要继承"),e("code",[t._v("ZuulFilter")]),t._v("，并实现它的四个抽象方法：")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("filterType")]),t._v("，对应Zuul生命周期的四个阶段：pre、post、route和error，我们要在请求转发出去前添加请求头，所以这里指定为pre；")]),t._v(" "),e("li",[e("strong",[t._v("filterOrder")]),t._v("，过滤器的优先级，数字越小，优先级越高。"),e("code",[t._v("PreDecorationFilter")]),t._v("过滤器的优先级为5，所以我们可以指定为6让我们的过滤器优先级比它低；")]),t._v(" "),e("li",[e("strong",[t._v("shouldFilter")]),t._v("，方法返回boolean类型，true时表示是否执行该过滤器的run方法，false则表示不执行；")]),t._v(" "),e("li",[e("strong",[t._v("run")]),t._v("，定义过滤器的主要逻辑。这里我们通过请求上下文"),e("code",[t._v("RequestContext")]),t._v("获取了转发的服务名称"),e("code",[t._v("serviceId")]),t._v("和请求对象"),e("code",[t._v("HttpServletRequest")]),t._v("，并打印请求日志。随后往请求上下文的头部添加了Key为"),e("code",[t._v("ZuulToken")]),t._v("，Value为"),e("code",[t._v("febs:zuul:123456")]),t._v("的信息。这两个值可以抽取到常量类中。")])]),t._v(" "),e("p",[t._v("在febs-common的cc.mrbird.febs.common.entity路径下新建"),e("code",[t._v("FebsConstant")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class FebsConstant {\n\n    /**\n     * Zuul请求头TOKEN名称（不要有空格）\n     */\n    public static final String ZUUL_TOKEN_HEADER = "ZuulToken";\n    /**\n     * Zuul请求头TOKEN值\n     */\n    public static final String ZUUL_TOKEN_VALUE = "febs:zuul:123456";\n}\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("然后上面的过滤器可以改造为：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Slf4j\n@Component\npublic class FebsGatewayRequestFilter extends ZuulFilter {\n\n    ......\n\n    @Override\n    public Object run() {\n        ......\n\n        byte[] token = Base64Utils.encode((FebsConstant.ZUUL_TOKEN_VALUE).getBytes());\n        ctx.addZuulRequestHeader(FebsConstant.ZUUL_TOKEN_HEADER, new String(token));\n        return null;\n    }\n}\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])]),e("p",[t._v("定义好Zuul过滤器后，我们需要在各个微服务里定义一个全局拦截器拦截请求，并校验Zuul Token。这个拦截器需要被众多微服务模块使用，所以把它定义在通用模块febs-common里。")]),t._v(" "),e("h2",{attrs:{id:"校验zuul-token"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#校验zuul-token"}},[t._v("#")]),t._v(" 校验Zuul Token")])])}),[],!1,null,null,null);e.default=l.exports}}]);