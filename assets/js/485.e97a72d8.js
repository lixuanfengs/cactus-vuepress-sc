(window.webpackJsonp=window.webpackJsonp||[]).push([[485],{835:function(v,_,t){"use strict";t.r(_);var d=t(0),r=Object(d.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#总结"}},[v._v("总结")]),_("ul",[_("li",[_("a",{attrs:{href:"#创建型设计模式"}},[v._v("创建型设计模式")])]),_("li",[_("a",{attrs:{href:"#结构型设计模式"}},[v._v("结构型设计模式")])]),_("li",[_("a",{attrs:{href:"#行为型设计模式"}},[v._v("行为型设计模式")])])])])])]),_("p"),v._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("23 种设计模式表格总结：")]),v._v(" "),_("h3",{attrs:{id:"创建型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建型设计模式"}},[v._v("#")]),v._v(" 创建型设计模式")]),v._v(" "),_("p",[v._v("简单来说就是用来创建对象的")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("设计模式")]),v._v(" "),_("th",[v._v("分类")]),v._v(" "),_("th",[v._v("简述")]),v._v(" "),_("th",[v._v("一句话归纳")]),v._v(" "),_("th",[v._v("目的")]),v._v(" "),_("th",[v._v("生活案例")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("工厂模式（Factory Pattern）")]),v._v(" "),_("td",[v._v("不同条件下创建不同实例")]),v._v(" "),_("td",[v._v("工厂生产物品")]),v._v(" "),_("td",[v._v("产品标准化，生产更高效")]),v._v(" "),_("td",[v._v("封装创建细节")]),v._v(" "),_("td",[v._v("实体工厂")])]),v._v(" "),_("tr",[_("td",[v._v("单例模式（Singleton Pattern）")]),v._v(" "),_("td",[v._v("保证一个类仅有一个实例，并且提供一个全局访问点")]),v._v(" "),_("td",[v._v("世上只有一个我")]),v._v(" "),_("td",[v._v("保证独一无二")]),v._v(" "),_("td",[v._v("CEO")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("原型模式（Prototype Pattern）")]),v._v(" "),_("td",[v._v("通过拷贝原型创建新的对象")]),v._v(" "),_("td",[v._v("拔一根猴毛，吹出千万个")]),v._v(" "),_("td",[v._v("高效创建对象")]),v._v(" "),_("td",[v._v("克隆")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("建造者模式（Builder Pattern）")]),v._v(" "),_("td",[v._v("用来创建复杂的复合对象")]),v._v(" "),_("td",[v._v("高配中配和低配，想选哪配就哪配")]),v._v(" "),_("td",[v._v("开放个性配置步骤")]),v._v(" "),_("td",[v._v("选配")]),v._v(" "),_("td")])])]),v._v(" "),_("h3",{attrs:{id:"结构型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构型设计模式"}},[v._v("#")]),v._v(" 结构型设计模式")]),v._v(" "),_("p",[v._v("关注类和对象的组合")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("设计模式")]),v._v(" "),_("th",[v._v("分类")]),v._v(" "),_("th",[v._v("简述")]),v._v(" "),_("th",[v._v("一句话归纳")]),v._v(" "),_("th",[v._v("目的")]),v._v(" "),_("th",[v._v("生活案例")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("代理模式（Proxy Pattern）")]),v._v(" "),_("td",[v._v("为其他对象提供一种代理以控制对这个对象的访问")]),v._v(" "),_("td",[v._v("没有资源没时间，得找别人来帮忙")]),v._v(" "),_("td",[v._v("没有资源没时间，得找别人来帮忙")]),v._v(" "),_("td",[v._v("增强职责")]),v._v(" "),_("td",[v._v("媒婆")])]),v._v(" "),_("tr",[_("td",[v._v("外观模式（Facade Pattern）")]),v._v(" "),_("td",[v._v("对外提供一个统一的接口用来访问子系统")]),v._v(" "),_("td",[v._v("打开一扇门，通向全世界")]),v._v(" "),_("td",[v._v("统一访问入口")]),v._v(" "),_("td",[v._v("前台")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("装饰器模式（Decorator Pattern）")]),v._v(" "),_("td",[v._v("为对象添加新功能")]),v._v(" "),_("td",[v._v("他大舅他二舅都是他舅")]),v._v(" "),_("td",[v._v("灵活扩展、同宗同源")]),v._v(" "),_("td",[v._v("煎饼")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("享元模式（Flyweight Pattern）")]),v._v(" "),_("td",[v._v("使用对象池来减少重复对象的创建")]),v._v(" "),_("td",[v._v("优化资源配置，减少重复浪费")]),v._v(" "),_("td",[v._v("共享资源池")]),v._v(" "),_("td",[v._v("全国社保联网")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("组合模式（Composite Pattern）")]),v._v(" "),_("td",[v._v("将整体与局部（树形结构）进行递归组合，让客户端能够以一种的方式对其进行处理")]),v._v(" "),_("td",[v._v("人在一起叫团伙，心在一起叫团队")]),v._v(" "),_("td",[v._v("统一整体和个体")]),v._v(" "),_("td",[v._v("组织架构树")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("适配器模式（Adapter Pattern）")]),v._v(" "),_("td",[v._v("将原来不兼容的两个类融合在一起")]),v._v(" "),_("td",[v._v("万能充电器")]),v._v(" "),_("td",[v._v("兼容转换")]),v._v(" "),_("td",[v._v("电源适配")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("桥接模式（Bridge Pattern）")]),v._v(" "),_("td",[v._v("将两个能够独立变化的部分分离开来")]),v._v(" "),_("td",[v._v("约定优于配置")]),v._v(" "),_("td",[v._v("不允许用继承")]),v._v(" "),_("td",[v._v("桥")]),v._v(" "),_("td")])])]),v._v(" "),_("h3",{attrs:{id:"行为型设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#行为型设计模式"}},[v._v("#")]),v._v(" 行为型设计模式")]),v._v(" "),_("p",[v._v("关注对象之间的通信")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("设计模式")]),v._v(" "),_("th",[v._v("分类")]),v._v(" "),_("th",[v._v("简述")]),v._v(" "),_("th",[v._v("一句话归纳")]),v._v(" "),_("th",[v._v("目的")]),v._v(" "),_("th",[v._v("生活案例")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("模板模式（Template Pattern）")]),v._v(" "),_("td",[v._v("定义一套流程模板，根据需要实现模板中的操作")]),v._v(" "),_("td",[v._v("流程全部标准化，需要微调请覆盖")]),v._v(" "),_("td",[v._v("流程全部标准化，需要微调请覆盖")]),v._v(" "),_("td",[v._v("逻辑复用")]),v._v(" "),_("td",[v._v("把大象装进冰箱")])]),v._v(" "),_("tr",[_("td",[v._v("策略模式（Strategy Pattern）")]),v._v(" "),_("td",[v._v("封装不同的算法，算法之间能互相替换")]),v._v(" "),_("td",[v._v("条条大道通罗马，具体哪条你来定")]),v._v(" "),_("td",[v._v("把选择权交给用户")]),v._v(" "),_("td",[v._v("选择支付方式")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("责任链模式（Chain of Responsibility Pattern）")]),v._v(" "),_("td",[v._v("拦截的类都实现统一接口，每个接收者都包含对下一个接收者的引用。将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。")]),v._v(" "),_("td",[v._v("各人自扫门前雪，莫管他们瓦上霜")]),v._v(" "),_("td",[v._v("解耦处理逻辑")]),v._v(" "),_("td",[v._v("踢皮球")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("迭代器模式（Iterator Pattern）")]),v._v(" "),_("td",[v._v("提供一种方法顺序访问一个聚合对象中的各个元素")]),v._v(" "),_("td",[v._v("流水线上坐一天，每个包裹扫一遍")]),v._v(" "),_("td",[v._v("统一对集合的访问方式")]),v._v(" "),_("td",[v._v("逐个检票进站")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("命令模式（Command Pattern）")]),v._v(" "),_("td",[v._v("将请求封装成命令，并记录下来，能够撤销与重做")]),v._v(" "),_("td",[v._v("运筹帷幄之中，决胜千里之外")]),v._v(" "),_("td",[v._v("解耦请求和处理")]),v._v(" "),_("td",[v._v("遥控器")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("状态模式（State Pattern）")]),v._v(" "),_("td",[v._v("根据不同的状态做出不同的行为")]),v._v(" "),_("td",[v._v("状态驱动行为，行为决定状态")]),v._v(" "),_("td",[v._v("绑定状态和行为")]),v._v(" "),_("td",[v._v("订单状态跟踪")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("备忘录模式（Memento Pattern）")]),v._v(" "),_("td",[v._v("保存对象的状态，在需要时进行恢复")]),v._v(" "),_("td",[v._v("失足不成千古恨，想重来时就重来")]),v._v(" "),_("td",[v._v("备份、后悔机制")]),v._v(" "),_("td",[v._v("草稿箱")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("中介者模式（Mediator Pattern）")]),v._v(" "),_("td",[v._v("将对象之间的通信关联关系封装到一个中介类中单独处理，从而使其耦合松散")]),v._v(" "),_("td",[v._v("联系方式我给你，怎么搞定我不管")]),v._v(" "),_("td",[v._v("统一管理网状资源")]),v._v(" "),_("td",[v._v("朋友圈")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("解释器模式（Interpreter Pattern）")]),v._v(" "),_("td",[v._v("给定一个语言，定义它的语法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子")]),v._v(" "),_("td",[v._v("我想说「方言」，一切解释权都归我")]),v._v(" "),_("td",[v._v("实现特定语法解析")]),v._v(" "),_("td",[v._v("摩斯密码")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("观察者模式（Observer Pattern）")]),v._v(" "),_("td",[v._v("状态发生改变时通知观察者，一对多的关系")]),v._v(" "),_("td",[v._v("到点就通知我")]),v._v(" "),_("td",[v._v("解耦观察者与被观察者")]),v._v(" "),_("td",[v._v("闹钟")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("访问者模式（Visitor Pattern）")]),v._v(" "),_("td",[v._v("稳定数据结构，定义新的操作行为")]),v._v(" "),_("td",[v._v("横看成岭侧成峰，远近高低各不同")]),v._v(" "),_("td",[v._v("解耦数据结构和数据操作")]),v._v(" "),_("td",[v._v("KPI考核")]),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("委派模式（Delegate Pattern）")]),v._v(" "),_("td",[v._v("允许对象组合实现与继承相同的代码重用，负责任务的调用和分配")]),v._v(" "),_("td",[v._v("允许对象组合实现与继承相同的代码重用，负责任务的调用和分配")]),v._v(" "),_("td",[v._v("这个需求很简单，怎么实现我不管")]),v._v(" "),_("td",[v._v("只对结果负责")]),v._v(" "),_("td",[v._v("授权委托书")])])])]),v._v(" "),_("p",[v._v("来自："),_("code",[v._v("http://c.biancheng.net/view/8462.html")]),v._v("。")])])}),[],!1,null,null,null);_.default=r.exports}}]);